<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pj2.shoecream.mapper.SocialImageMapper">
	
	<!-- 소셜 프로필 (소셜 게시물 등록) -->
	<insert id="insertPosts"
		parameterType="com.pj2.shoecream.vo.SocialVO">
		INSERT INTO
		social_posts
		VALUES(
		#{posts_idx}
		, #{mem_idx}
		, #{mem_nickname}
		, #{posts_content}
		, #{posts_image1}
		, 0
		, now()
		)
	</insert>
	
	<!-- 소셜 프로필 (소셜 게시물 정보 가져가기) -->
	<select id="SelectSocialProfile" resultType="com.pj2.shoecream.vo.SocialVO">
		SELECT *
		FROM mem_info mi
		JOIN social_posts sp ON mi.mem_idx = sp.mem_idx
		WHERE mi.mem_idx = #{mem_idx}
	</select>
	
	<select id="selectDetail" resultType="com.pj2.shoecream.vo.SocialVO">
		SELECT *
		FROM social_posts
		WHERE posts_idx = #{posts_idx}
		ORDER BY posts_idx DESC
		LIMIT #{startRow}, #{listLimit}
	</select>
	
	<!-- 소셜 스토리 (팔로우한 mem_idx 만 게시글 보이기) -->
	<select id="selectStory" resultType="com.pj2.shoecream.vo.SocialVO">
		SELECT * FROM
		social_posts
		WHERE mem_idx
		IN (SELECT followee_idx FROM social_follows WHERE follower_idx = #{sId})
		ORDER BY posts_date DESC
		LIMIT
		#{startRow}, #{listLimit}
	</select>
	
	<select id="selectCommentsByPostId" resultType="com.pj2.shoecream.vo.SocialCommentVO">
	  SELECT * FROM
	  social_comment
	  WHERE posts_idx = #{posts_idx}
<!-- 	  ORDER BY comment_date DESC -->
			ORDER BY
				comment_re_ref ASC
				, comment_re_seq ASC
	</select>
	
	<!-- 소셜 인기페이지 (좋아요 많은 순서) -->
	<select id="selectPopularLikeImage" resultType="map">
	    SELECT A.*, B.*, COUNT(C.likes_idx) as likeCount
	    FROM mem_info A
	    JOIN social_posts B ON A.mem_idx = B.mem_idx
	    LEFT JOIN social_likes C ON B.posts_idx = C.posts_idx
	    GROUP BY B.posts_idx
	    ORDER BY likeCount DESC
	</select>
	
	<!-- 소셜 인기페이지 (게시물 최신순) -->
	<select id="selectPopularLatestImage" resultType="map">
	    SELECT A.*, B.*
	    FROM mem_info A
	    JOIN social_posts B ON A.mem_idx = B.mem_idx
	    LEFT JOIN social_likes C ON B.posts_idx = C.posts_idx
	    GROUP BY B.posts_idx
	    ORDER BY posts_date DESC
	</select>
	
	
	<!-- 회원 정보 및 팔로우 관련 정보 -->
	<select id="selectAllInfoWithFollows" resultType="map">
		SELECT
		  A.*,
		  COUNT(DISTINCT B.followee_idx) AS followeeCount,
		  COUNT(DISTINCT C.follower_idx) AS followerCount
		FROM mem_info A
		LEFT JOIN social_follows B ON A.mem_idx = B.follower_idx
		LEFT JOIN social_follows C ON A.mem_idx = C.followee_idx
		GROUP BY A.mem_idx
		ORDER BY followerCount DESC
		LIMIT 9
	</select>
	
	<select id="selectSocial" resultType="com.pj2.shoecream.vo.SocialVO">
		SELECT * FROM social_posts
		WHERE posts_idx = #{posts_idx}
	</select>
	
	<select id="selectImageDetail">
		SELECT * FROM social_posts
		WHERE posts_idx = #{posts_idx}
	</select>
	
	<!-- 소셜 디테일 파일 삭제 버튼 -->
	<delete id="deletePostsImage">
	    UPDATE social_posts
	    SET posts_image1 = null
	    WHERE posts_idx = #{posts_idx}
	</delete>
	
	<!-- 소셜 디테일 수정 -->
	<update id="updatePosts" parameterType="com.pj2.shoecream.vo.SocialVO">
	    UPDATE social_posts
	    SET
	    mem_idx = #{mem_idx},
	    mem_nickname = #{mem_nickname},
	    posts_content = #{posts_content},
	    posts_image1 = #{posts_image1},
	    likeCount = #{likeCount}
	    WHERE posts_idx = #{posts_idx}
	</update>
	
	<!-- 소셜 이미지 변경 없을 시 수정 -->
	 <update id="updatePostsNoImage" parameterType="com.pj2.shoecream.vo.SocialVO">
        UPDATE social_posts
        SET mem_idx = #{mem_idx},
            mem_nickname = #{mem_nickname},
            posts_content = #{posts_content}
        WHERE posts_idx = #{posts_idx}
    </update>
	
	<!-- 소셜 포스트 삭제 -->
	<delete id="deletePost">
		DELETE FROM social_posts
		WHERE posts_idx = #{posts_idx}
	</delete>
	
	<!-- 댓글 등록 -->
	<insert id="insertComment" parameterType="com.pj2.shoecream.vo.SocialCommentVO" useGeneratedKeys="true" keyProperty="comment_idx" >
        INSERT
        INTO social_comment
        VALUES (
            null                -- comment_idx(댓글 번호)
            , #{posts_idx}      -- posts_idx(댓글의 원본 게시물 글 번호)
            , #{mem_idx}        -- mem_idx(로그인한 회원)
            , #{mem_nickname}   -- mem_nickname
            , #{comment_content}  -- comment_content
            , 0                 -- comment_re_ref(원본 댓글 번호)
            , 0                 -- comment_re_lev(댓글 들여쓰기 레벨)
            , 0                 -- comment_re_seq(댓글 순서번호)
            , now()
        )
	</insert>
	
	<!-- 댓글 쓰면 바로 초기화 -->
	<update id="updateComment_ref" parameterType="com.pj2.shoecream.vo.SocialCommentVO">
	    UPDATE social_comment
	        SET
	            comment_re_ref = #{comment_idx}
	        WHERE
	            comment_idx = #{comment_idx}
	</update>
	
    <!-- 댓글 쓸때 가져갈 프로필 경로 -->
    <select id="findProfileImageUrlByMemberId" parameterType="int" resultType="string">
        SELECT mem_profileImageUrl
        FROM mem_info
        WHERE mem_idx = #{mem_idx}
    </select>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteCommentById">
		DELETE
		FROM social_comment
		WHERE comment_idx = #{comment_idx}
	</delete>
	
	<!-- 소셜 포스트 삭제할 이미지 셀렉 -->
	<select id="selectPostsImage">
		SELECT posts_image1
		FROM social_posts
		WHERE posts_idx = #{posts_idx}
	</select>
	
	<!-- 대댓글 등록 -->
	<insert id="insertReComment" parameterType="com.pj2.shoecream.vo.SocialCommentVO" useGeneratedKeys="true" keyProperty="comment_idx">
        INSERT
        INTO social_comment
        VALUES (
            null                -- comment_idx(댓글 번호)
            , #{posts_idx}      -- posts_idx(댓글의 원본 게시물 글 번호)
            , #{mem_idx}        -- mem_idx(로그인한 회원)
            , #{mem_nickname}   -- mem_nickname
            , #{comment_content}  -- comment_content
            , #{comment_re_ref}   -- comment_re_ref(원본 댓글 번호)
            , #{comment_re_lev} + 1  -- comment_re_lev(댓글 들여쓰기 레벨)
            , #{comment_re_seq} + 1  -- comment_re_seq(댓글 순서번호)
            , now()
        )
	</insert>
	
	  <select id="findById" resultType="com.pj2.shoecream.vo.SocialCommentVO">
	    SELECT *
	    FROM social_comment
	    WHERE comment_idx = #{comment_re_ref}
	  </select>
	
	<select id="findCommentById" resultType="com.pj2.shoecream.vo.SocialCommentVO">
	    SELECT *
	    FROM social_comment
	    WHERE comment_idx = #{comment_idx}
	</select>

</mapper>
