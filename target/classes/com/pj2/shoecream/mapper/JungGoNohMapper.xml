<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pj2.shoecream.mapper.JungGoNohMapper">
		<!-- 상품 작성 - INSERT -->
	
	<insert id="insertJungProduct">
	
		INSERT
			INTO jung_product
			VALUES (
				  #{product_idx} -- product_idx
				, #{mem_idx} -- mem_idx
				, #{product_title} -- product_title
				, #{product_info} -- product_info
				, #{product_payment} -- product_payment
				, #{lc_code} -- lc_code
				, #{mc_code} -- mc_code
				, now() -- product_date
				, #{product_readcount} -- product_readcount
				, #{product_brand} -- product_brand
				, #{product_size} -- product_size
				, 0 -- 식별코드 중고
				, #{product_price} -- product_price
				, #{product_status} -- product_status
				, '대기중' -- product_sell_status
				, #{product_location} -- product_location
				, -1
			)
	</insert>
	
	<!-- 물건 사진 등록 -->
	<insert id="insertProductImage">
	
		INSERT
			INTO product_image
			VALUES (
				  #{product_idx} -- product_idx
				, #{image1_name} -- image1_name
				, #{image2_name} -- image2
				, #{image3_name} -- image3
				, #{image4_name} -- image4
				, '/resources/upload' -- path
			)
	</insert>
	
	<!-- 상품 상세보기 - SELECT -->
	<select id="selectProduct" resultType="com.pj2.shoecream.vo.JungGoNohVO">
		SELECT jpd.product_idx, jpd.product_price, jpd.product_status, jpd.product_sell_status, jpd.product_location
		, jpd.product_title, jpd.product_info, jpd.product_payment, jpd.lc_code, jpd.mc_code
		, jpd.product_date, jpd.product_readcount, jpd.product_brand, jpd.product_size, jpd.product_selector
		, mi.mem_idx, mi.mem_id, mi.mem_nickname, mi.mem_rank, mi.mem_profileImageUrl
		, lcg.lc_name, mcg.mc_name
		, pi.image1 as image1_name, pi.image2 as image2_name, pi.image3 as image3_name, pi.image4 as image4_name, pi.image_path 
		, (select count(*) from dibs di where jpd.product_idx = di.product_idx) dibs_count
		, (select count(*) from joonggo_report jgr where jpd.product_idx = jgr.product_idx) report_count
		FROM jung_product jpd
		  JOIN mem_info mi
		    ON jpd.mem_idx = mi.mem_idx
		  JOIN large_category lcg
		  	ON jpd.lc_code = lcg.lc_code
		  JOIN middle_category mcg
		  	ON jpd.lc_code = mcg.mc_code
LEFT OUTER JOIN product_image pi
		    ON jpd.product_idx = pi.product_idx
	     WHERE jpd.product_idx = #{product_idx}
	</select>
	
	<!-- 찜 검색 -->
	<select id="selectDibs" resultType="com.pj2.shoecream.vo.JungGoNohVO">
	    SELECT product_idx, favorite_check
	      FROM dibs
	     WHERE product_idx = #{product_idx}
	       AND mem_idx = ${buyier_idx}
	</select>
	
		<!-- 게시물 조회수 증가 - UPDATE -->
	<!-- selectKey 를 활용하여 조회수 증가 후의 board_readcount 값을 조회하여 BoardVO 객체에 저장 -->
	<!-- 조회된 결과값을 저장할 변수가 파라미터로 전달받은 객체의 멤버변수명과 동일할 경우 해당 객체에 저장 -->
	<!-- 이 때, 객체를 별도로 리턴 선언하지 않고도, 객체는 공유되므로 외부에서 변경된 값을 사용 가능 -->
	<update id="updateReadcount">
		<!-- selectKey 태그는 위치와 상관없이 order 속성값에 따라 실행됨 -->
		<selectKey keyProperty="product_readcount" resultType="int" order="AFTER">
			SELECT product_readcount
			  FROM jung_product
			 WHERE product_idx = #{product_idx}
		</selectKey>
		UPDATE jung_product
		   SET product_readcount = product_readcount + 1
		 WHERE product_idx = #{product_idx}
	</update>
		
		<!-- 글 삭제 - DELETE -->
	<!-- 글번호가 일치하는 레코드 삭제 -->
	<delete id="deleteProduct" >
		DELETE 
		  FROM jung_product
		 WHERE product_idx = #{product_idx}
	</delete>
	
	<!-- 찜등록 -->
	<insert id="insertDibs">
	INSERT INTO dibs
		 VALUES 
		 (#{dibs_idx}
	     ,#{buyier_idx}
	     ,#{product_idx}
	     ,'Y')
	</insert>
	
	<!-- 찜해제 -->
	<delete id="deleteDibs">
		DELETE 
		  FROM dibs
		 WHERE product_idx = #{product_idx}
		   AND mem_idx = #{buyier_idx}
	</delete>
	
	
	<!-- 찜 등록시 조회수 감소 -->
	<update id="decreaseReadcount">
		UPDATE jung_product
		   SET product_readcount = product_readcount - 1
		 WHERE product_idx = #{product_idx}
	</update>
	
	<!-- 더 많은 상품 목록 리스트 3개 -->
	<select id="getMoreProductListSmall" resultType="map" parameterType="com.pj2.shoecream.vo.JungGoNohVO">
	   SELECT jpd.product_idx, jpd.product_price, jpd.product_status, jpd.product_sell_status, jpd.product_location
		, jpd.product_title, jpd.product_info, jpd.product_payment, jpd.lc_code, jpd.mc_code
		, jpd.product_date, jpd.product_readcount, jpd.product_brand, jpd.product_size, jpd.product_selector
		, mi.mem_idx, mi.mem_id, mi.mem_nickname, mi.mem_rank
		, pi.image1
		FROM jung_product jpd
		JOIN mem_info mi
		  ON jpd.mem_idx = mi.mem_idx
		JOIN product_image pi
		  ON jpd.product_idx = pi.product_idx
	   WHERE mi.mem_idx = ${mem_idx}	
    ORDER BY jpd.product_idx desc 
	   LIMIT 3;
	</select>
	

	
	<!-- 신고 등록 -->
	<insert id="insertReport">
	
		INSERT
			INTO joonggo_report
			VALUES (
				 null -- 신고글 번호
				, #{product_title} -- 판매글 제목
				, #{product_idx} -- 판매물건 번호 
				, #{mem_idx} -- 판매자 번호
				, #{buyier_idx} -- 신고 신청자 번호
				, #{report_div} -- 신고유형
				, #{report_detail} -- 상세내용
				, now() -- 신고일자
				
			)
	</insert>
	
		<!-- 신고 등록 시 이전 내용 조회 -->
	<select id="selectReports" parameterType="com.pj2.shoecream.vo.JungGoNohVO">
	  SELECT product_idx
	      FROM joonggo_report
	     WHERE product_idx = #{product_idx}
	       AND seller_idx = #{mem_idx}
	       AND reporter_idx = #{buyier_idx}
	</select>
	
		<!-- 신고 조회 -->
	<select id="moreReportListSmall" resultType="map" parameterType="com.pj2.shoecream.vo.JungGoNohVO">
	  SELECT jr.report_idx, jr.report_content, jr.product_idx, jr.seller_idx, jr.reporter_idx, jr.report_div, jr.report_detail, jr.report_date
	  		, mi.mem_idx, mi.mem_nickname
	      FROM joonggo_report jr
	      JOIN mem_info mi
	       ON jr.seller_idx = mi.mem_idx
	     WHERE jr.seller_idx = #{mem_idx}
	</select>
	

	
			<!-- 리뷰 등록 시 이전 내용 조회 -->
	<select id="selectReview" parameterType="com.pj2.shoecream.vo.JungGoNohVO">
	  SELECT jung_rev_idx
	      FROM jung_reviews
	     WHERE product_idx = #{product_idx}
	       AND seller_idx = #{mem_idx}
	       AND writer_idx = #{buyier_idx}
	</select>
	
		<!-- 리뷰 등록 -->
	<insert id="insertReview">
	
		INSERT
			INTO jung_reviews
			VALUES (
				 null -- 리뷰글 번호
				, #{product_idx} -- 상품코드 
				, #{mem_idx} -- 판매자 번호
				, #{buyier_idx} -- 리뷰 작성자 번호
				, #{review_content} -- 리뷰 내용
				, #{review_star} -- 리뷰 별점
				, now()	
				)
	</insert>
	
			<!-- 리뷰 조회 -->
	<select id="selectReview2" parameterType="com.pj2.shoecream.vo.JungGoNohVO">
	  SELECT jung_rev_idx, product_idx, seller_idx as mem_idx, writer_idx as buyier_idx, review_content, review_star, DATE_FORMAT(review_date,'%Y-%m-%d') as review_date
	      FROM jung_reviews
	     WHERE product_idx = #{product_idx}
	       AND seller_idx = #{mem_idx}
	       AND writer_idx = #{buyier_idx}
	</select>
		<!-- 리뷰 수정 -->
	<update id="modifyReview">
		UPDATE jung_reviews
			SET review_content = #{review_content},
				review_star = #{review_star} 
			WHERE product_idx = #{product_idx}
	        AND seller_idx = #{mem_idx}
	        AND writer_idx = #{buyier_idx}
	</update>
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview">
		DELETE 
		  FROM jung_reviews
		 WHERE product_idx = #{product_idx}
	        AND seller_idx = #{mem_idx}
	        AND writer_idx = #{buyier_idx}
	</delete>
	
	
	<!-- 더 많은 리뷰 목록 리스트 3개 -->
	<select id="getMoreReviewListSmall" resultType="map" parameterType="com.pj2.shoecream.vo.JungGoNohVO">
	SELECT jr.jung_rev_idx, jr.product_idx, jr.seller_idx, jr.writer_idx, jr.review_content, jr.review_star, jr.review_date
         , mi.mem_nickname, mi.mem_profileImageUrl  
	  FROM jung_reviews jr
	  JOIN mem_info mi
		ON jr.writer_idx = mi.mem_idx 
	  WHERE seller_idx = #{mem_idx}
    ORDER BY product_idx desc 
	   LIMIT 2;   
	</select>
	
	<!--DB pay_info  -->
	<select id="selectPayInfo" resultType="com.pj2.shoecream.vo.JungGoNohVO">
		SELECT pi.pay_idx, pi.mem_idx as buyier_idx, pi.product_idx, pi.product_selector, pi.pay_method, pi.pay_total, pi.pay_status, pi.cancel_trade_reason
			 , pi.cancel_pay, pi.point_idx, pi.trans_date
		     , jpd.mem_idx, jpd.product_title, jpd.product_payment, jpd.product_price
		     , mi.mem_nickname, mi.mem_idx
		     , bi.mem_nickname as buyier_nickname, bi.mem_idx as buyier_idx
		     
		     , pi.product_idx as sub_product_idx
		     , pi.mem_idx as sub_buyier_idx
		     , mi.mem_idx as sub_seller_idx
		     , jpd.product_price as sub_pay
		     
		     
		  FROM pay_info pi
		  JOIN jung_product jpd
		  	ON pi.product_idx  = jpd.product_idx
		  JOIN mem_info mi
		  	ON jpd.mem_idx = mi.mem_idx
		  JOIN mem_info bi
		  	ON pi.mem_idx = bi.mem_idx 
		 WHERE pi.product_idx = ${product_idx}
		 ORDER BY pi.trans_date desc
		 LIMIT 1
	</select>
	
	<select id="selectPayInfo2" resultType="com.pj2.shoecream.vo.JungGoNohVO">
		SELECT pi.pay_idx, pi.mem_idx as buyier_idx, pi.product_idx, pi.product_selector, pi.pay_method, pi.pay_total, pi.pay_status, pi.cancel_trade_reason
			 , pi.cancel_pay, pi.point_idx, pi.trans_date
		     , jpd.mem_idx, jpd.product_title, jpd.product_payment, jpd.product_price
		     , mi.mem_nickname, mi.mem_idx
		     , bi.mem_nickname as buyier_nickname, bi.mem_idx as buyier_idx
		     , pi.product_idx as sub_product_idx
		     , pi.mem_idx as sub_buyier_idx
		     , mi.mem_idx as sub_seller_idx
		     , jpd.product_price as sub_pay
		  FROM pay_info pi
		  JOIN jung_product jpd
		  	ON pi.product_idx  = jpd.product_idx
		  JOIN mem_info mi
		  	ON jpd.mem_idx = mi.mem_idx
		  JOIN mem_info bi
		  	ON pi.mem_idx = bi.mem_idx 
		 WHERE pi.product_idx = ${sub_product_idx} AND pi.mem_idx = ${sub_buyier_idx} AND mi.mem_idx = ${sub_seller_idx} AND pi.pay_total = ${sub_pay}
	</select>
	
</mapper>
