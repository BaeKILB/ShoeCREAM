<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pj2.shoecream.mapper.JungGoNohMapper">
	<!-- 상품 작성 - INSERT -->
	<insert id="insertProduct">
		<selectKey keyProperty="product_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(product_idx), 0) FROM product
		</selectKey>
		INSERT
			INTO product
			VALUES (
				#{product_idx} + 1    -- product_idx
				, #{mem_idx}     -- mem_idx
				, #{product_title}  -- product_title
				, #{product_info}  -- product_info
				, #{product_payment}    -- product_payment
				, #{lc_code}    -- lc_code
				, #{mc_code}    -- mc_code
				, #{sc_code}  -- sc_code
				, now()             -- product_date
				, #{product_readcount} 
				, #{product_brand}
				, #{product_size}
				, 1 -- 중고
			)
	</insert>
	
	<insert id="insertJungProduct">
		<selectKey keyProperty="product_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(product_idx), 0) FROM product
		</selectKey>
		INSERT
			INTO jung_product
			VALUES (
				#{product_idx}     -- product_idx
				, #{product_price}     -- product_price
				, #{product_status}  -- product_status
				, '대기중'  -- product_sell_status
				, #{product_location}    -- product_location
			)
	</insert>
	
	
	<!-- 상품 상세보기 - SELECT -->
	<select id="selectProduct" resultType="com.pj2.shoecream.vo.JungGoNohVO">
		SELECT jpd.product_idx, jpd.product_price, jpd.product_status, jpd.product_sell_status, jpd.product_location
		, pd.product_title, pd.product_info, pd.product_payment, pd.lc_code, pd.mc_code, pd.sc_code
		, pd.product_date, pd.product_readcount, pd.product_brand, pd.product_size, pd.product_selector
		, mi.mem_idx, mi.mem_id
		  FROM product pd
		  JOIN jung_product jpd
		    ON pd.product_idx = jpd.product_idx
		  JOIN mem_info mi
		    ON pd.mem_idx = mi.mem_idx
	     WHERE pd.product_idx = #{product_idx}
	</select>
	
		<!-- 게시물 조회수 증가 - UPDATE -->
	<!-- selectKey 를 활용하여 조회수 증가 후의 board_readcount 값을 조회하여 BoardVO 객체에 저장 -->
	<!-- 조회된 결과값을 저장할 변수가 파라미터로 전달받은 객체의 멤버변수명과 동일할 경우 해당 객체에 저장 -->
	<!-- 이 때, 객체를 별도로 리턴 선언하지 않고도, 객체는 공유되므로 외부에서 변경된 값을 사용 가능 -->
	<update id="updateReadcount">
		<!-- selectKey 태그는 위치와 상관없이 order 속성값에 따라 실행됨 -->
		<selectKey keyProperty="product_readcount" resultType="int" order="AFTER">
			SELECT product_readcount
			  FROM product
			 WHERE product_idx = #{product_idx}
		</selectKey>
		UPDATE product
		   SET product_readcount = product_readcount + 1
		 WHERE product_idx = #{product_idx}
	</update>
		
		<!-- 글 삭제 - DELETE -->
	<!-- 글번호가 일치하는 레코드 삭제 -->
	<delete id="deleteProduct">
		DELETE 
		  FROM product
		 WHERE product_idx = #{product_idx}
	</delete>
	
</mapper>
