<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pj2.shoecream.mapper.AdminMapper">
	<!-- 회원 조회 -->
	<select id="selectMemberInfo" resultType="com.pj2.shoecream.vo.MemberVO">
		SELECT *
			FROM mem_info
				<if test="!searchKeyword.equals('')">
					WHERE 
					<choose>
						<when test="searchType.equals('mem_id')">
							mem_id LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
						<when test="searchType.equals('mem_name')">
							mem_name LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
						<when test="searchType.equals('mem_nickname')">
							mem_nickname LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
						<when test="searchType.equals('mem_rank')">
							mem_rank LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
					</choose>
				</if>
			LIMIT
				#{startRow}
				, #{listLimit}
	</select>
	<select id="selectMemberListCount" resultType="int">
		SELECT COUNT(*)
			FROM mem_info
				<if test="!searchKeyword.equals('')">
					WHERE 
					<choose>
						<when test="searchType.equals('mem_id')">
							mem_id LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
						<when test="searchType.equals('mem_name')">
							mem_name LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
						<when test="searchType.equals('mem_nickname')">
							mem_nickname LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
						<when test="searchType.equals('mem_rank')">
							mem_rank LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
					</choose>
				</if>
	</select>
	<!-- 회원 정보 상세조회 -->
	<select id="getMemberInfo" resultType="com.pj2.shoecream.vo.MemberVO">
		SELECT *
			FROM mem_info
			WHERE mem_idx = #{mem_idx}
	</select>
	<!-- 회원 등업 업데이트 -->
<!-- 	<update id="updateMemberRank"> -->
<!-- 		UPDATE MEMBER -->
<!-- 			SET mem_rank -->
<!-- 	</update> -->

	<!-- 회원 삭제 처리 -->
	<delete id="deleteMember">
		DELETE FROM mem_info
			WHERE mem_idx = #{mem_idx}
	</delete>
	
	<!-- 일대일 문의 게시판 조회 -->
	<select id="selectQstBoard" resultType="com.pj2.shoecream.vo.InquiryBoardVO">
		SELECT *
			FROM qst_board
				<if test="!searchType.equals('')">
					WHERE qst_type = #{searchType}
				</if>
				ORDER BY
					qst_board_re_ref DESC
					, qst_board_re_seq ASC
			LIMIT
				#{startRow}
				, #{listLimit}
	</select>
	<select id="getQstListCount" resultType="int">
		SELECT COUNT(*)
			FROM qst_board
				<if test="!searchType.equals('')">
					WHERE qst_type = #{searchType}
				</if>
	</select>
	<!-- 일대일 문의 디테일 조회 -->
	<select id="selectQst" resultType="com.pj2.shoecream.vo.InquiryBoardVO">
		SELECT *
			FROM qst_board
				WHERE qst_idx = #{qst_idx}
	</select>
	<select id="selectQstAns" resultType="com.pj2.shoecream.vo.InquiryBoardVO">
		SELECT *
			FROM qst_board
				WHERE qst_board_re_ref = #{qst_idx}
				AND qst_board_re_lev > 0
	</select>
	<!-- 일대일 답변 등록 -->
	<insert id="insertQstBoard">
		<selectKey keyProperty="qst_max_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(qst_idx), 0) FROM qst_board
		</selectKey>
		INSERT INTO qst_board
			VALUES (
				#{qst_max_num} + 1
				, #{mem_idx}
				, '슈크림'
				, #{qst_pass}
				, #{qst_subject}
				, #{qst_content}
				, #{qst_board_re_ref}
				, #{qst_board_re_lev} + 1
				, #{qst_board_re_seq} + 1 
				, now()
				, #{qst_type}
				, 'Y'
		)
	</insert>
	<!-- 답변 등록 시 참조글 상태 업데이트 -->
	<update id="updateQstStatus">
		UPDATE qst_board
			SET ans_status = 'Y'
				WHERE qst_idx = #{qst_idx}
	</update>
	<!-- 답변 수정 -->
	<update id="updateQstAns">
		UPDATE qst_board
			SET
				qst_subject = #{inquiry.qst_subject}
				, qst_content = #{inquiry.qst_content}
					WHERE qst_board_re_ref = #{qst_idx}
					AND qst_board_re_lev > 0
	</update>
	<!-- 답변 삭제 -->
	<delete id="inquiryDelete">
		DELETE FROM qst_board
			WHERE qst_board_re_ref = #{qst_idx}
			AND qst_board_re_lev > 0
	</delete>
	<!-- 답변 삭제 시 상태 업데이트 -->
	<update id="deleteUpdateQstAns">
		UPDATE qst_board
			SET ans_status = 'N'
				WHERE qst_idx = #{qst_idx}
	</update>
	<!-- 일대일 내역 조회 -->
	<select id="getMainQstBoard" resultType="com.pj2.shoecream.vo.InquiryBoardVO">
		SELECT *
			FROM qst_board
				ORDER BY
					qst_board_re_ref DESC
					, qst_board_re_seq ASC
			LIMIT
				#{listLimit}
	</select>
<!-- 	<select id="getCreamRequestList" resultType="com.pj2.shoecream.vo.CreamRequestVO"> -->
<!-- 		SELECT * -->
<!-- 			FROM cream_item_request -->
<!-- 				<if test="!searchKeyword.equals('')"> -->
<!-- 					WHERE  -->
<!-- 					<choose> -->
<!-- 						<when test="searchType.equals('cream_idx')"> -->
<!-- 							cream_idx LIKE CONCAT('%', #{searchKeyword},'%') -->
<!-- 						</when> -->
<!-- 					</choose> -->
<!-- 				</if> -->
<!-- 			ORDER BY -->
<!-- 					request_idx DESC -->
<!-- 			LIMIT -->
<!-- 				#{startRow} -->
<!-- 				, #{listLimit} -->
<!-- 	</select> -->
	<select id="getCreamRequestList" resultType="com.pj2.shoecream.vo.CreamRequestVO">
		SELECT
		    cir.request_idx,
		    cir.mem_idx,
		    cir.cream_idx,
		    cir.cream_title,
		    cir.cream_size,
		    cir.cream_price,
		    cir.delivery_status,
		    cir.tracking_company,
		    cir.tracking_num,
		    cir.request_time,
		    ci.delivery_status AS inbound_delivery_status,
		    ci.tracking_company AS inbound_tracking_company,
		    ci.tracking_code AS inbound_tracking_code,
		    ci.tracking_num AS inbound_tracking_num
		FROM
	   	 cream_item_request cir
	   	 <if test="!searchKeyword.equals('')">
					WHERE 
					<choose>
						<when test="searchType.equals('cream_idx')">
							cream_idx LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
					</choose>
				</if>
	    LEFT JOIN 
	    	courier_info ci ON cir.tracking_num = ci.tracking_num
    	ORDER BY
				request_idx DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	
	</select>
	
	<select id="getMemberAccount" resultType="com.pj2.shoecream.vo.MemAccountVO">
			SELECT
			    ma.mem_account_idx,
			    ma.mem_idx,
			    mi.mem_name,
			    ma.mem_seq_no,
			    ma.bank_code_std,
			    ma.account_num,
			    ma.fintech_use_num
			FROM
			    mem_account ma
			JOIN
    			mem_info mi ON ma.mem_idx = mi.mem_idx
			<if test="!searchKeyword.equals('')">
				WHERE 
				<choose>
					<when test="searchType.equals('')">
						ma.mem_idx LIKE CONCAT('%', #{searchKeyword},'%')
					</when>
					<when test="searchType.equals('회원번호')">
						ma.mem_idx LIKE CONCAT('%', #{searchKeyword},'%')
					</when>
				</choose>
			</if>
			ORDER BY
				ma.mem_account_idx
			LIMIT
				#{startRow}
				, #{listLimit}
	</select>
	<select id="getAccountListCount" resultType="int">
		SELECT COUNT(*)
			FROM mem_account
				<if test="!searchType.equals('')">
					WHERE 
					<choose>
						<when test="searchType.equals('회원번호')">
							mem_idx LIKE CONCAT('%', #{searchKeyword},'%')
						</when>
					</choose>
				</if>
	</select>
	

<!--  민진 민진 민진민진민진민진민진민진민진민진민진민진 -->
<!--  중고 상품 조회 -->
	<select id="selectProduct">
	    SELECT
	        p.product_idx,
	        p.product_brand,
	        p.product_price,
	        p.product_info,
	        p.product_date,
	        i.image1,
	        i.image_path
	    FROM 
	        jung_product AS p
	    LEFT JOIN product_image AS i ON p.product_idx = i.product_idx
	    <where>
	        <if test="searchType != null and searchKeyword != null">
	            <choose>
	                <when test="searchType.equals('brand')">
	                    AND p.product_brand LIKE CONCAT('%', #{searchKeyword}, '%')
	                </when>
	                <when test="searchType.equals('product_info')">
	                    AND p.product_info LIKE CONCAT('%', #{searchKeyword}, '%')
	                </when>
	                <when test="searchType.equals('code')">
	                    AND p.product_idx LIKE CONCAT('%', #{searchKeyword}, '%')
	                </when>
	                <otherwise>
	                    <!-- If searchType exists but searchKeyword is null, handle the case here -->
	                </otherwise>
	            </choose>
	        </if>
	    </where>
	    ORDER BY p.product_idx ASC
	    LIMIT #{cri.skip}, #{cri.amount}
	</select>
		
		 <select id="getTotal" resultType="int">
		SELECT COUNT(*)
			FROM board_notice
		</select>
		  
		<!--  경매 상품 조회 -->
	<select id="selectauctionmap" >
	    SELECT
	        a.auction_idx,
	        a.auction_brand,
	        COALESCE(b.bid_price, a.auc_start_price) AS bid_price,
	        a.auction_info,
	        a.auc_start_price,
	        i.image1,
	        a.auc_regist_date,
	        i.image_path
	    FROM 
	        auction_item AS a
	    LEFT JOIN product_image AS i ON a.auction_idx = i.product_idx
	    LEFT JOIN (
	        SELECT auction_idx, MAX(bid_price) AS bid_price
	        FROM bid_list
	        GROUP BY auction_idx
	    ) AS b ON a.auction_idx = b.auction_idx
	    <if test="searchType != null and searchKeyword != null">
	        <choose>
	            <when test="searchType.equals('brand')">
	                WHERE a.auction_brand LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	            <when test="searchType.equals('auction_title')">
	                WHERE a.auction_info LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	            <when test="searchType.equals('code')">
	                WHERE a.auction_idx LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	        </choose>
	    </if>
	    ORDER BY a.auction_idx ASC
	    <if test="cri != null">
	        LIMIT #{cri.skip}, #{cri.amount}
	    </if>
	</select>

<!-- 중고 상품 신고 -->
	<select id="getReportListPaging" resultType="com.pj2.shoecream.vo.ReportVO">
		SELECT report_idx, report_content, product_idx, report_div, report_detail
		FROM (
		    SELECT report_idx, report_content, product_idx, report_div, report_detail, COUNT(*) OVER (PARTITION BY product_idx) AS product_count
		    FROM joonggo_report
		) AS n1
		WHERE product_count >= 5
		<choose>
		    <when test="!searchKeyword.equals('') and searchType.equals('title')">
		        AND report_div LIKE CONCAT('%', #{searchKeyword}, '%')
		    </when>
		    <when test="!searchKeyword.equals('') and searchType.equals('content')">
		        AND report_detail LIKE CONCAT('%', #{searchKeyword}, '%')
		    </when>
		    <when test="!searchKeyword.equals('') and searchType.equals('title_content')">
		        AND report_content LIKE CONCAT('%', #{searchKeyword}, '%')
		    </when>
		</choose>
		ORDER BY report_idx ASC
		LIMIT #{cri.amount} OFFSET #{cri.skip}
	</select>
	
	<!-- 페이징 -->
	<select id="getPage" resultType="int">
		SELECT COUNT(*)
			FROM  joonggo_report
	</select>
		
		<!--  중고 신고 삭제  -->
	<delete id="deleteReport">
		  DELETE r, p
		  FROM joonggo_report r
		  JOIN jung_product p ON r.product_idx = p.product_idx
		  WHERE r.product_idx = #{product_idx}
	</delete>
	
	<!-- 경매 상품 신고  -->
	<select id="getAuctionReportListPaging" resultType="com.pj2.shoecream.vo.ReportVO">
	SELECT auction_report_idx, report_content, auction_idx, report_div, report_detail
	FROM (
	    SELECT auction_report_idx, report_content, auction_idx, report_div, report_detail, COUNT(*) OVER (PARTITION BY auction_idx) AS product_count
	    FROM auction_report
	) AS n1
	WHERE product_count >= 5
	<choose>
	    <when test="!searchKeyword.equals('') and searchType.equals('title')">
	        AND report_div LIKE CONCAT('%', #{searchKeyword}, '%')
	    </when>
	    <when test="!searchKeyword.equals('') and searchType.equals('content')">
	        AND report_detail LIKE CONCAT('%', #{searchKeyword}, '%')
	    </when>
	    <when test="!searchKeyword.equals('') and searchType.equals('title_content')">
	        AND report_content LIKE CONCAT('%', #{searchKeyword}, '%')
	    </when>
	</choose>
	ORDER BY auction_report_idx ASC
	LIMIT #{cri.amount} OFFSET #{cri.skip}
	</select>
	<!-- 페이징 -->
	 <select id="getPaging" resultType="int">
		SELECT COUNT(*)
			FROM  auction_report
	</select>
		
		<!--  경매 신고 삭제 -->
	<delete id="deleteAuctionReport">
		 DELETE a, m
		  FROM auction_report a
		  JOIN auction_item m ON a.auction_idx = m.auction_idx
		  WHERE a.auction_idx = #{auction_idx}
	</delete>
		
		<!-- 중고 상품 삭제 -->
	<delete id="deleteProduct">
		DELETE FROM jung_product
	    WHERE product_idx = #{product_idx}
	</delete>
		
		<!-- 경매 상품 삭제 -->
	<delete id="deleteAuction">
			DELETE FROM auction_item
		    WHERE auction_idx = #{auction_idx}
	</delete>
		
		<!--  중고 페이징 -->
	<select id="getproduct" resultType="int">
		SELECT COUNT(*)
			FROM  jung_product
	</select>
		
		<!--  경매 페이징 -->
	<select id="getAucpaging" resultType="int">
		SELECT COUNT(*)
			FROM  auction_item
	</select>
		
	<!--  크림 상품 목록 -->
	<select id="selectcreammap" >
	    SELECT cream_idx, cream_title
		FROM cream_item
	    <where>
	        <if test="searchType != null and searchKeyword != null">
	            <choose>
	                <when test="searchType.equals('code')">
	                   AND cream_idx LIKE CONCAT('%', #{searchKeyword}, '%')
	                </when>
	                <when test="searchType.equals('title')">
	                    AND cream_title LIKE CONCAT('%', #{searchKeyword}, '%')
	                </when>
	            </choose>
	        </if>
	    </where>
	    ORDER BY cream_idx ASC
	    LIMIT #{cri.skip}, #{cri.amount}
	</select>
	<select id="getcreampaging">
		SELECT COUNT(*)
				FROM  cream_item
	</select> 
	<!--  크림 삭제 -->
		<delete id="deletecream">
		DELETE FROM cream_item
		    WHERE ci_code = #{ci_code}
	</delete>
	
	<!--  구글 차트 -->
	<select id="selectProductList">
	   SELECT mc.lc_name AS category, COUNT(*) AS count
			FROM auction_item ai
			JOIN large_category mc ON ai.lc_code = mc.lc_code
			GROUP BY ai.lc_code;
	</select>
	
	<select id="selectAuctionList">
		SELECT mc.lc_name AS category, COUNT(*) AS count
			FROM jung_product jp
			JOIN large_category mc ON jp.lc_code = mc.lc_code
			GROUP BY jp.lc_code;
	</select>
	<!-- 메인페이지 회원 수 세기 -->
	<select id="selectMemberCount" resultType="int">
		SELECT COUNT(*)
				FROM mem_info
				WHERE mem_id != 'admin'
	</select>
	
	<!-- 중고 상품 수 세기 -->
	<select id="selectPro" resultType="int">
		SELECT COUNT(*)
				FROM jung_product
	</select>
	
	<!--  경매 상품 수 세기 -->
	<select id="selectAuctionCount" resultType="int">
		SELECT COUNT(*)
				FROM auction_item
	</select>
	
	<!--  크림 상품 수 세기 -->
	<select id="selectCreamCount" resultType="int">
		SELECT COUNT(*)
				FROM cream_item
	</select>
	
	<!-- 포인트 입출금 -->
	<select id="selectAdminPointList" >
		SELECT *
			FROM point_inout
			WHERE point_usage = '관리자입출금';
	</select>
	<select id="selectAdminInfo">
		SELECT * 
				FROM mem_info
				WHERE mem_id = 'admin'
	</select>
	<select id="selectMemAccount">
	select * from mem_account;
	</select>



</mapper>